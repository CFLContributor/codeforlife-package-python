# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python package

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  release:
    runs-on: ubuntu-latest
    concurrency: release

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Python Semantic Release
      uses: relekang/python-semantic-release@master
      with:
        github_token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
  
  # test:
  #   name: Test Code
  #   runs-on: ubuntu-latest
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       python-version: ["3.7"]
  #   steps:
  #   - name: Checkout Code
  #     uses: actions/checkout@v3
    
  #   - name: Set up Python ${{ matrix.python-version }}
  #     uses: actions/setup-python@v3
  #     with:
  #       python-version: ${{ matrix.python-version }}
    
  #   - name: Install dependencies
  #     run: |
  #       python -m pip install --upgrade pip
  #       python -m pip install pipenv
  #       pipenv install --dev
    
  #   - name: Lint with flake8
  #     run: |
  #       # TODO: lint with black
  #       # stop the build if there are Python syntax errors or undefined names
  #       # flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
  #       # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
  #       # flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
  #   - name: Test with pytest
  #     run: |
  #       pipenv run pytest tests
  
  # requirements:
  #   name: Generate Requirements
  #   runs-on: ubuntu-latest
  #   ##needs: [test]
  #   steps:
  #   - name: Checkout Code
  #     uses: actions/checkout@v3
    
  #   - name: Setup Python 3.7
  #     uses: actions/setup-python@v4
  #     with:
  #       python-version: '3.7'

  #   - name: Generate requirements.txt
  #     run: |
  #       python -m pip install --upgrade pip
  #       python -m pip install pipenv
  #       # https://pipenv.pypa.io/en/latest/advanced/#generating-a-requirements-txt
  #       pipenv requirements > requirements.txt

  #   - name: Commit and push requirements.txt
  #     env:
  #       PAT: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
  #     run: |
  #       # https://github.com/actions/checkout#push-a-commit-using-the-built-in-token
  #       git config user.name github-actions
  #       git config user.email github-actions@github.com
  #       git add .
  #       # Only commit and push if there are differences.
  #       git diff --staged --quiet || git commit -m "ci[requirements]: auto-generated" && git push "https://$env:PAT@github.com/ocadotechnology/codeforlife.git"
  
  # https://github.com/actions/create-release#example-workflow---create-a-release
  # release:
  #   name: Create Release
  #   runs-on: ubuntu-latest
  #   #needs: [test, requirements]
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v2
    
  #   - name: Setup Python 3.7
  #     uses: actions/setup-python@v4
  #     with:
  #       python-version: '3.7'
    
  #   - name: Install Semantic Release
  #     run: |
  #       python -m pip install --upgrade pip
  #       python -m pip install python-semantic-release

  #   - name: Changelog
  #     run: |
  #       semantic-release publish
    
  #   - name: Get Package Metadata
  #     run: |
  #       echo "PACKAGE_VERSION=$(semantic-release print-version)" >> $GITHUB_ENV
  #       $PACKAGE_VERSION

    # - name: Create Release
    #   id: create_release
    #   uses: actions/create-release@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
    #   with:
    #     # TODO: set dynamically
    #     tag_name: 0.0.0 #${{ github.ref }}
    #     release_name: 0.0.0 #Release ${{ github.ref }}
    #     # TODO: set dynamically
    #     body: |
    #       Changes in this Release
    #       - First Change
    #       - Second Change
    #     draft: false
    #     prerelease: false
