# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python package

on:
  push:
    branches: [ "main" ]
    paths-ignore:
    - "codeforlife/version.py"
    - "requirements.txt"
    - "CHANGELOG.md"

jobs:
  test:
    name: Test Code
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.7"]
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install Python Packages
      run: |
        python -m pip install --upgrade pip
        python -m pip install pipenv
        pipenv install --dev
    
    - name: Check Code Format
      run: if ! pipenv run black --check .; then exit 1; fi
    
    # TODO: assert code coverage target.
    - name: Test Code Units
      run: pipenv run pytest tests
  
  release:
    name: Publish Release
    concurrency: release
    runs-on: ubuntu-latest
    needs: [test]
    steps:
    - uses: actions/checkout@v3
      with:
        token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        fetch-depth: 0
    
    - name: Set up Python 3.7
      uses: actions/setup-python@v4
      with:
        python-version: '3.7'
    
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install pipenv python-semantic-release~=7.33
    
    - name: Push Requirements
      run: |
        git config --local user.name github-actions
        git config --local user.email github-actions@github.com
        
        pipenv requirements > requirements.txt
        git add requirements.txt

        # Only commit and push if there are differences.
        if ! git diff --staged --quiet; then
          git commit -m "ci[requirements]: auto-generated"
          git push
        fi
    
    - name: Publish Semantic Release
      env:
        GH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      run: pipenv run semantic-release publish --verbosity=DEBUG
