# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python package

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: Test Package
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.7"]
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Update pip and install pipenv
      run: |
        python -m pip install --upgrade pip
        python -m pip install pipenv
    
    - name: Generate, commit and push requirements.txt
      run: |
        # https://pipenv.pypa.io/en/latest/advanced/#generating-a-requirements-txt
        pipenv requirements > requirements.txt
        # https://github.com/actions/checkout#push-a-commit-using-the-built-in-token
        git config user.name github-actions
        git config user.email github-actions@github.com
        git add .
        git commit -m "auto-generated requirements.txt"
        git push

    - name: Install dependencies
      run: |
        pipenv install --dev
    
    - name: Lint with flake8
      run: |
        # TODO: lint with black
        # stop the build if there are Python syntax errors or undefined names
        # flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        # flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test with pytest
      run: |
        pytest
  
  build:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            Changes in this Release
            - First Change
            - Second Change
          draft: false
          prerelease: false
